package prob23;

import java.util.ArrayList;

public class AscendingArrayOfNumbers {

	public static ArrayList<Integer> result(ArrayList<Integer> arrayList) {

		ArrayList<ArrayList<Integer>> possibleSequences = new ArrayList<ArrayList<Integer>>();
		ArrayList<Integer> temp = new ArrayList<Integer>();
		int[] nrOfAppearancesOfEachNumber = countElementAppearance(arrayList);

		int index = 0;

		for (int i = 0; i < arrayList.size(); i++) {

			for (int j = i; j < arrayList.size(); j++) {

				for (int k = j; k < arrayList.size(); k++) {

					if (arrayList.get(k) == arrayList.get(j) && nrOfAppearancesOfEachNumber[k] > 0){
						
						temp.add(arrayList.get(k));
						
						nrOfAppearancesOfEachNumber[k]--;
						
					}
						
						
					
					
				}
			}

		}

		return null;
	}

	private static int[] countElementAppearance(ArrayList<Integer> arrayList) {

		int[] array = new int[determineMaxFromArrayList(arrayList) + 1];

		for (Integer value : arrayList)

			array[value]++;

		return array;
	}

	private static Integer determineMaxFromArrayList(ArrayList<Integer> arrayList) {

		int max = arrayList.get(0);

		for (int i = 1; i < arrayList.size(); i++)

			if (arrayList.get(i) > max)

				max = arrayList.get(i);

		return max;
	}

}
