package prob23;

import java.util.ArrayList;

public class AscendingArrayOfNumbers {

	public static ArrayList<Integer> result(ArrayList<Integer> arrayList) {

		ArrayList<ArrayList<Integer>> possibleSequences = new ArrayList<ArrayList<Integer>>();
		int[] nrOfAppearancesOfEachNumber = countElementAppearance(arrayList);

		for (int i = 0; i < arrayList.size(); i++) {

			possibleSequences
					.add(returnMaximumPossibleSequenceStartingFromList(arrayList, nrOfAppearancesOfEachNumber));

			nrOfAppearancesOfEachNumber[arrayList.get(i)]--;

			arrayList.remove(i);

		}

		arrayList = returnMaxSizeArrayList(possibleSequences);

		return arrayList;
	}

	private static ArrayList<Integer> returnMaximumPossibleSequenceStartingFromList(ArrayList<Integer> arrayList,
			int[] nrOfAppearancesOfEachNumber) {

		ArrayList<ArrayList<Integer>> possibleSequences = new ArrayList<ArrayList<Integer>>();

		return null;
	}

	private static ArrayList<Integer> returnMaxSizeArrayList(ArrayList<ArrayList<Integer>> possibleSequences) {

		int maxSize = possibleSequences.get(0).size();
		int maxSizeListIndex = 0;

		for (int i = 0; i < possibleSequences.size(); i++)

			if (possibleSequences.get(i).size() > maxSize) {

				maxSize = possibleSequences.get(i).size();

				maxSizeListIndex = i;
			}

		return possibleSequences.get(maxSizeListIndex);
	}

	private static int[] countElementAppearance(ArrayList<Integer> arrayList) {

		int[] array = new int[determineMaxFromArrayList(arrayList) + 1];

		for (Integer value : arrayList)

			array[value]++;

		return array;
	}

	private static Integer determineMaxFromArrayList(ArrayList<Integer> arrayList) {

		int max = arrayList.get(0);

		for (int i = 1; i < arrayList.size(); i++)

			if (arrayList.get(i) > max)

				max = arrayList.get(i);

		return max;
	}

}
